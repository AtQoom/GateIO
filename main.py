import os
import json
import time
import asyncio
import threading
import websockets
import logging
from decimal import Decimal, ROUND_DOWN
from datetime import datetime
from flask import Flask, request, jsonify
from gate_api import ApiClient, Configuration, FuturesApi, FuturesOrder, UnifiedApi

# ----------- Î°úÍ∑∏ ÌïÑÌÑ∞ Î∞è ÏÑ§Ï†ï -----------
class CustomFilter(logging.Filter):
    def filter(self, record):
        filter_keywords = [
            "Ïã§ÏãúÍ∞Ñ Í∞ÄÍ≤©", "Ìã∞Ïª§ ÏàòÏã†", "Ìè¨ÏßÄÏÖò ÏóÜÏùå", "Í≥ÑÏ†ï ÌïÑÎìú",
            "Îã¥Î≥¥Í∏à Ï†ÑÌôò", "ÏµúÏ¢Ö ÏÑ†ÌÉù", "Ï†ÑÏ≤¥ Í≥ÑÏ†ï Ï†ïÎ≥¥",
            "ÏõπÏÜåÏºì Ìïë", "Ìïë Ï†ÑÏÜ°", "Ìïë ÏÑ±Í≥µ", "ping",
            "Serving Flask app", "Debug mode", "WARNING: This is a development server"
        ]
        message = record.getMessage()
        return not any(keyword in message for keyword in filter_keywords)

werkzeug_logger = logging.getLogger('werkzeug')
werkzeug_logger.setLevel(logging.ERROR)

logger = logging.getLogger()
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.addFilter(CustomFilter())
formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s')
console_handler.setFormatter(formatter)
logger.handlers = []
logger.addHandler(console_handler)

def log_debug(tag, msg, exc_info=False):
    logger.info(f"[{tag}] {msg}")
    if exc_info:
        logger.exception(msg)

# ----------- ÏÑúÎ≤Ñ ÏÑ§Ï†ï -----------
app = Flask(__name__)

API_KEY = os.environ.get("API_KEY", "")
API_SECRET = os.environ.get("API_SECRET", "")
SETTLE = "usdt"

BINANCE_TO_GATE_SYMBOL = {
    "BTCUSDT": "BTC_USDT",
    "ETHUSDT": "ETH_USDT",
    "ADAUSDT": "ADA_USDT",
    "SUIUSDT": "SUI_USDT",
    "LINKUSDT": "LINK_USDT",
    "SOLUSDT": "SOL_USDT",
    "PEPEUSDT": "PEPE_USDT"
}

SYMBOL_CONFIG = {
    "BTC_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("0.0001"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "ETH_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("0.001"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "ADA_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("10"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "SUI_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("1"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "LINK_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("1"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "SOL_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("1"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "PEPE_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("10000"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    }
}

config = Configuration(key=API_KEY, secret=API_SECRET)
client = ApiClient(config)
api = FuturesApi(client)
unified_api = UnifiedApi(client)

position_state = {}
position_lock = threading.RLock()
account_cache = {"time": 0, "data": None}
actual_entry_prices = {}

import os
import json
import time
import asyncio
import threading
import websockets
import logging
from decimal import Decimal, ROUND_DOWN
from datetime import datetime
from flask import Flask, request, jsonify
from gate_api import ApiClient, Configuration, FuturesApi, FuturesOrder, UnifiedApi

# ----------- Î°úÍ∑∏ ÌïÑÌÑ∞ Î∞è ÏÑ§Ï†ï -----------
class CustomFilter(logging.Filter):
    def filter(self, record):
        filter_keywords = [
            "Ïã§ÏãúÍ∞Ñ Í∞ÄÍ≤©", "Ìã∞Ïª§ ÏàòÏã†", "Ìè¨ÏßÄÏÖò ÏóÜÏùå", "Í≥ÑÏ†ï ÌïÑÎìú",
            "Îã¥Î≥¥Í∏à Ï†ÑÌôò", "ÏµúÏ¢Ö ÏÑ†ÌÉù", "Ï†ÑÏ≤¥ Í≥ÑÏ†ï Ï†ïÎ≥¥",
            "ÏõπÏÜåÏºì Ìïë", "Ìïë Ï†ÑÏÜ°", "Ìïë ÏÑ±Í≥µ", "ping",
            "Serving Flask app", "Debug mode", "WARNING: This is a development server"
        ]
        message = record.getMessage()
        return not any(keyword in message for keyword in filter_keywords)

werkzeug_logger = logging.getLogger('werkzeug')
werkzeug_logger.setLevel(logging.ERROR)

logger = logging.getLogger()
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.addFilter(CustomFilter())
formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s')
console_handler.setFormatter(formatter)
logger.handlers = []
logger.addHandler(console_handler)

def log_debug(tag, msg, exc_info=False):
    logger.info(f"[{tag}] {msg}")
    if exc_info:
        logger.exception(msg)

# ----------- ÏÑúÎ≤Ñ ÏÑ§Ï†ï -----------
app = Flask(__name__)

API_KEY = os.environ.get("API_KEY", "")
API_SECRET = os.environ.get("API_SECRET", "")
SETTLE = "usdt"

BINANCE_TO_GATE_SYMBOL = {
    "BTCUSDT": "BTC_USDT",
    "ETHUSDT": "ETH_USDT",
    "ADAUSDT": "ADA_USDT",
    "SUIUSDT": "SUI_USDT",
    "LINKUSDT": "LINK_USDT",
    "SOLUSDT": "SOL_USDT",
    "PEPEUSDT": "PEPE_USDT"
}

SYMBOL_CONFIG = {
    "BTC_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("0.0001"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "ETH_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("0.001"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "ADA_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("10"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "SUI_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("1"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "LINK_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("1"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "SOL_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("1"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    },
    "PEPE_USDT": {
        "min_qty": Decimal("1"),
        "qty_step": Decimal("1"),
        "contract_size": Decimal("10000"),
        "sl_pct": Decimal("0.0035"),
        "tp_pct": Decimal("0.006"),
        "min_notional": Decimal("10")
    }
}

config = Configuration(key=API_KEY, secret=API_SECRET)
client = ApiClient(config)
api = FuturesApi(client)
unified_api = UnifiedApi(client)

position_state = {}
position_lock = threading.RLock()
account_cache = {"time": 0, "data": None}
actual_entry_prices = {}

# === üî• Ï§ëÎ≥µ ÏßÑÏûÖ Î∞©ÏßÄ ÏãúÏä§ÌÖú ===
alert_cache = {}  # {alert_id: timestamp}
recent_signals = {}  # {symbol: {"side": side, "time": timestamp, "action": action}}
duplicate_prevention_lock = threading.RLock()

def is_duplicate_alert(alert_id, symbol, side, action):
    """Ï§ëÎ≥µ ÏïåÎ¶º Ï≤¥ÌÅ¨ Î∞è Î∞©ÏßÄ"""
    global alert_cache  # üî• Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú Î™ÖÏãúÏ†Å ÏÑ†Ïñ∏
    
    with duplicate_prevention_lock:
        current_time = time.time()
        
        # 1. Í∞ôÏùÄ alert_idÍ∞Ä Ïù¥ÎØ∏ Ï≤òÎ¶¨ÎêòÏóàÎäîÏßÄ ÌôïÏù∏
        if alert_id in alert_cache:
            time_diff = current_time - alert_cache[alert_id]
            if time_diff < 60:  # 1Î∂Ñ Ïù¥ÎÇ¥ Í∞ôÏùÄ IDÎäî Ï§ëÎ≥µ
                log_debug("üö´ Ï§ëÎ≥µ ÏïåÎ¶º Ï∞®Îã®", f"ID: {alert_id}, {time_diff:.1f}Ï¥à Ï†Ñ Ï≤òÎ¶¨Îê®")
                return True
        
        # 2. Í∞ôÏùÄ Ïã¨Î≥ºÏùò ÏµúÍ∑º Ïã†Ìò∏ ÌôïÏù∏ (ÏßÑÏûÖ Ïã†Ìò∏Îßå)
        if action == "entry" and symbol in recent_signals:
            recent = recent_signals[symbol]
            time_diff = current_time - recent["time"]
            
            # Í∞ôÏùÄ Î∞©Ìñ• Ïã†Ìò∏Í∞Ä 30Ï¥à Ïù¥ÎÇ¥Ïóê ÏûàÏúºÎ©¥ Ï§ëÎ≥µ
            if recent["side"] == side and recent["action"] == "entry" and time_diff < 30:
                log_debug("üö´ Ï§ëÎ≥µ ÏßÑÏûÖ Ï∞®Îã®", f"{symbol} {side} Ïã†Ìò∏Í∞Ä {time_diff:.1f}Ï¥à Ï†ÑÏóê Ïù¥ÎØ∏ Ï≤òÎ¶¨Îê®")
                return True
        
        # 3. Ï§ëÎ≥µÏù¥ ÏïÑÎãàÎ©¥ Ï∫êÏãúÏóê Ï†ÄÏû•
        alert_cache[alert_id] = current_time
        
        if action == "entry":
            recent_signals[symbol] = {
                "side": side,
                "time": current_time,
                "action": action
            }
        
        # 4. Ïò§ÎûòÎêú Ï∫êÏãú Ï†ïÎ¶¨ (Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨) - üî• ÏàòÏ†ï
        cutoff_time = current_time - 300  # 5Î∂Ñ Ïù¥Ï†Ñ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        alert_cache = {k: v for k, v in alert_cache.items() if v > cutoff_time}
        
        log_debug("‚úÖ Ïã†Í∑ú ÏïåÎ¶º ÏäπÏù∏", f"ID: {alert_id}, {symbol} {side} {action}")
        return False

def get_total_collateral(force=False):
    """ÏàúÏûêÏÇ∞(Account Equity) Ï°∞Ìöå"""
    now = time.time()
    if not force and account_cache["time"] > now - 5 and account_cache["data"]:
        return account_cache["data"]
    try:
        try:
            unified_accounts = unified_api.list_unified_accounts()
            if hasattr(unified_accounts, 'unified_account_total_equity'):
                equity = Decimal(str(unified_accounts.unified_account_total_equity))
                log_debug("üí∞ Account Equity(ÏàúÏûêÏÇ∞)", f"{equity} USDT")
                account_cache.update({"time": now, "data": equity})
                return equity
            elif hasattr(unified_accounts, 'equity'):
                equity = Decimal(str(unified_accounts.equity))
                log_debug("üí∞ Account Equity(ÏàúÏûêÏÇ∞)", f"{equity} USDT")
                account_cache.update({"time": now, "data": equity})
                return equity
        except Exception as e:
            log_debug("‚ö†Ô∏è Unified Account Ï°∞Ìöå Ïã§Ìå®", str(e))
        try:
            from gate_api import WalletApi
            wallet_api = WalletApi(client)
            total_balance = wallet_api.get_total_balance(currency="USDT")
            if hasattr(total_balance, 'total'):
                equity = Decimal(str(total_balance.total))
                log_debug("üí∞ WalletApi Ï¥ù ÏûîÍ≥†", f"{equity} USDT")
                account_cache.update({"time": now, "data": equity})
                return equity
        except Exception as e:
            log_debug("‚ö†Ô∏è WalletApi Ï°∞Ìöå Ïã§Ìå®", str(e))
        acc = api.list_futures_accounts(SETTLE)
        available = Decimal(str(getattr(acc, 'available', '0')))
        log_debug("üí∞ ÏÑ†Î¨º Í≥ÑÏ†ï available", f"{available} USDT")
        account_cache.update({"time": now, "data": available})
        return available
    except Exception as e:
        log_debug("‚ùå Ï¥ù ÏûêÏÇ∞ Ï°∞Ìöå Ïã§Ìå®", str(e), exc_info=True)
        return Decimal("0")

def get_price(symbol):
    """ÌòÑÏû¨ Í∞ÄÍ≤© Ï°∞Ìöå"""
    try:
        ticker = api.list_futures_tickers(SETTLE, contract=symbol)
        if not ticker or len(ticker) == 0:
            return Decimal("0")
        price_str = str(ticker[0].last).upper().replace("E", "e")
        price = Decimal(price_str).normalize()
        return price
    except Exception as e:
        log_debug(f"‚ùå Í∞ÄÍ≤© Ï°∞Ìöå Ïã§Ìå® ({symbol})", str(e), exc_info=True)
        return Decimal("0")

def calculate_position_size(symbol):
    """
    ÏàúÏûêÏÇ∞(Account Equity) Í∏∞Î∞òÏúºÎ°ú Ìè¨ÏßÄÏÖò ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
    Ïã§Ï†ú Î†àÎ≤ÑÎ¶¨ÏßÄ 1Î∞∞Î°ú ÎèôÏûë
    """
    cfg = SYMBOL_CONFIG[symbol]
    
    # 1. ÏàúÏûêÏÇ∞ Ï°∞Ìöå (Ï†ÑÏ≤¥ Î≥¥Ïú† ÏûêÏÇ∞)
    equity = get_total_collateral(force=True)
    price = get_price(symbol)
    
    if price <= 0 or equity <= 0:
        return Decimal("0")
    
    try:
        # 2. ÏàúÏûêÏÇ∞ Ï†ÑÏï°ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú ÏàòÎüâ Í≥ÑÏÇ∞ (Î†àÎ≤ÑÎ¶¨ÏßÄ 1Î∞∞)
        raw_qty = equity / (price * cfg["contract_size"])
        
        # 3. Í±∞ÎûòÏÜå Í∑úÏπôÏóê ÎßûÍ≤å ÏàòÎüâ Ï°∞Ï†ï
        qty = (raw_qty // cfg["qty_step"]) * cfg["qty_step"]
        final_qty = max(qty, cfg["min_qty"])
        
        # 4. ÏµúÏÜå Ï£ºÎ¨∏ Í∏àÏï° Ï≤¥ÌÅ¨
        order_value = final_qty * price * cfg["contract_size"]
        if order_value < cfg["min_notional"]:
            log_debug(f"‚õî ÏµúÏÜå Ï£ºÎ¨∏ Í∏àÏï° ÎØ∏Îã¨ ({symbol})", f"{order_value} < {cfg['min_notional']} USDT")
            return Decimal("0")
        
        # 5. Î°úÍπÖ (ÏàúÏûêÏÇ∞ Í∏∞Î∞òÏûÑÏùÑ Î™ÖÏãú)
        log_debug(f"üìä ÏàòÎüâ Í≥ÑÏÇ∞ ({symbol})", 
                 f"ÏàúÏûêÏÇ∞: {equity} USDT, Í∞ÄÍ≤©: {price}, Í≥ÑÏïΩÌÅ¨Í∏∞: {cfg['contract_size']}, "
                 f"ÏàòÎüâ(Í≥ÑÏïΩ): {final_qty}, Ìà¨ÏûêÍ∏àÏï°: {order_value:.2f} USDT (Î†àÎ≤ÑÎ¶¨ÏßÄ 1Î∞∞)")
        
        return final_qty
        
    except Exception as e:
        log_debug(f"‚ùå ÏàòÎüâ Í≥ÑÏÇ∞ Ïò§Î•ò ({symbol})", str(e), exc_info=True)
        return Decimal("0")

def place_order(symbol, side, qty, reduce_only=False, retry=3):
    """Ï£ºÎ¨∏ Ïã§Ìñâ"""
    acquired = position_lock.acquire(timeout=5)
    if not acquired:
        log_debug(f"‚ö†Ô∏è Ï£ºÎ¨∏ ÎùΩ Ïã§Ìå® ({symbol})", "ÌÉÄÏûÑÏïÑÏõÉ")
        return False
    try:
        cfg = SYMBOL_CONFIG[symbol]
        step = cfg["qty_step"]
        min_qty = cfg["min_qty"]
        qty_dec = Decimal(str(qty)).quantize(step, rounding=ROUND_DOWN)
        if qty_dec < min_qty:
            log_debug(f"‚õî ÏûòÎ™ªÎêú ÏàòÎüâ ({symbol})", f"{qty_dec} < ÏµúÏÜå {min_qty}")
            return False
        price = get_price(symbol)
        order_value = qty_dec * price * cfg["contract_size"]
        if order_value < cfg["min_notional"]:
            log_debug(f"‚õî ÏµúÏÜå Ï£ºÎ¨∏ Í∏àÏï° ÎØ∏Îã¨ ({symbol})", f"{order_value} < {cfg['min_notional']}")
            return False
        size = float(qty_dec) if side == "buy" else -float(qty_dec)
        order = FuturesOrder(contract=symbol, size=size, price="0", tif="ioc", reduce_only=reduce_only)
        log_debug(f"üì§ Ï£ºÎ¨∏ ÏãúÎèÑ ({symbol})", f"{side.upper()} {float(qty_dec)} Í≥ÑÏïΩ, Ï£ºÎ¨∏Í∏àÏï°: {order_value:.2f} USDT (Î†àÎ≤ÑÎ¶¨ÏßÄ 1Î∞∞)")
        api.create_futures_order(SETTLE, order)
        log_debug(f"‚úÖ Ï£ºÎ¨∏ ÏÑ±Í≥µ ({symbol})", f"{side.upper()} {float(qty_dec)} Í≥ÑÏïΩ")
        time.sleep(2)
        update_position_state(symbol)
        return True
    except Exception as e:
        error_msg = str(e)
        log_debug(f"‚ùå Ï£ºÎ¨∏ Ïã§Ìå® ({symbol})", f"{error_msg}")
        if retry > 0 and ("INVALID_PARAM" in error_msg or "POSITION_EMPTY" in error_msg or "INSUFFICIENT_AVAILABLE" in error_msg):
            retry_qty = (Decimal(str(qty)) * Decimal("0.5") // step) * step
            retry_qty = max(retry_qty, min_qty)
            log_debug(f"üîÑ Ïû¨ÏãúÎèÑ ({symbol})", f"{qty} ‚Üí {retry_qty}")
            return place_order(symbol, side, float(retry_qty), reduce_only, retry-1)
        return False
    finally:
        position_lock.release()

def update_position_state(symbol, timeout=5):
    """Ìè¨ÏßÄÏÖò ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏"""
    acquired = position_lock.acquire(timeout=timeout)
    if not acquired:
        return False
    try:
        try:
            pos = api.get_position(SETTLE, symbol)
        except Exception as e:
            if "POSITION_NOT_FOUND" in str(e):
                position_state[symbol] = {
                    "price": None, "side": None,
                    "size": Decimal("0"), "value": Decimal("0"),
                    "margin": Decimal("0"), "mode": "cross"
                }
                if symbol in actual_entry_prices:
                    del actual_entry_prices[symbol]
                return True
            else:
                log_debug(f"‚ùå Ìè¨ÏßÄÏÖò Ï°∞Ìöå Ïã§Ìå® ({symbol})", str(e))
                return False
        size = Decimal(str(pos.size))
        if size != 0:
            api_entry_price = Decimal(str(pos.entry_price))
            mark = Decimal(str(pos.mark_price))
            actual_price = actual_entry_prices.get(symbol)
            entry_price = actual_price if actual_price else api_entry_price
            value = abs(size) * mark * SYMBOL_CONFIG[symbol]["contract_size"]
            position_state[symbol] = {
                "price": entry_price,
                "side": "buy" if size > 0 else "sell",
                "size": abs(size),
                "value": value,
                "margin": value,
                "mode": "cross"
            }
        else:
            position_state[symbol] = {
                "price": None, "side": None,
                "size": Decimal("0"), "value": Decimal("0"), "margin": Decimal("0"), "mode": "cross"
            }
            if symbol in actual_entry_prices:
                del actual_entry_prices[symbol]
        return True
    except Exception as e:
        log_debug(f"‚ùå Ìè¨ÏßÄÏÖò Ï°∞Ìöå Ïã§Ìå® ({symbol})", str(e), exc_info=True)
        return False
    finally:
        position_lock.release()

def log_initial_status():
    """ÏÑúÎ≤Ñ ÏãúÏûëÏãú Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÍπÖ"""
    try:
        log_debug("üöÄ ÏÑúÎ≤Ñ ÏãúÏûë", "Ï¥àÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...")
        equity = get_total_collateral(force=True)
        log_debug("üí∞ Ï¥ù ÏûêÏÇ∞(Ï¥àÍ∏∞)", f"{equity} USDT")
        for symbol in SYMBOL_CONFIG:
            if not update_position_state(symbol, timeout=3):
                log_debug("‚ùå Ìè¨ÏßÄÏÖò Ï°∞Ìöå Ïã§Ìå®", f"Ï¥àÍ∏∞Ìôî Ï§ë {symbol} ÏÉÅÌÉú ÌôïÏù∏ Î∂àÍ∞Ä")
                continue
            pos = position_state.get(symbol, {})
            if pos.get("side"):
                log_debug(
                    f"üìä Ï¥àÍ∏∞ Ìè¨ÏßÄÏÖò ({symbol})",
                    f"Î∞©Ìñ•: {pos['side']}, ÏàòÎüâ: {pos['size']}, ÏßÑÏûÖÍ∞Ä: {pos['price']}, ÌèâÍ∞ÄÍ∏àÏï°: {pos['value']} USDT"
                )
            else:
                log_debug(f"üìä Ï¥àÍ∏∞ Ìè¨ÏßÄÏÖò ({symbol})", "Ìè¨ÏßÄÏÖò ÏóÜÏùå")
    except Exception as e:
        log_debug("‚ùå Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÍπÖ Ïã§Ìå®", str(e), exc_info=True)

def close_position(symbol):
    """Ìè¨ÏßÄÏÖò Ï≤≠ÏÇ∞"""
    acquired = position_lock.acquire(timeout=5)
    if not acquired:
        log_debug(f"‚ö†Ô∏è Ï≤≠ÏÇ∞ ÎùΩ Ïã§Ìå® ({symbol})", "ÌÉÄÏûÑÏïÑÏõÉ")
        return False
    try:
        log_debug(f"üîÑ Ï≤≠ÏÇ∞ ÏãúÎèÑ ({symbol})", "size=0 Ï£ºÎ¨∏")
        api.create_futures_order(SETTLE, FuturesOrder(contract=symbol, size=0, price="0", tif="ioc", close=True))
        log_debug(f"‚úÖ Ï≤≠ÏÇ∞ ÏôÑÎ£å ({symbol})", "")
        if symbol in actual_entry_prices:
            del actual_entry_prices[symbol]
        time.sleep(1)
        update_position_state(symbol)
        return True
    except Exception as e:
        log_debug(f"‚ùå Ï≤≠ÏÇ∞ Ïã§Ìå® ({symbol})", str(e))
        return False
    finally:
        position_lock.release()

@app.route("/ping", methods=["GET", "HEAD"])
def ping():
    """Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏"""
    return "pong", 200

@app.route("/", methods=["POST"])
def webhook():
    """TradingView ÏõπÌõÖ Ï≤òÎ¶¨ (Ï§ëÎ≥µ Î∞©ÏßÄ Í∏∞Îä• Ìè¨Ìï®)"""
    symbol = None
    try:
        log_debug("üîÑ ÏõπÌõÖ ÏãúÏûë", "ÏöîÏ≤≠ ÏàòÏã†")
        if not request.is_json:
            return jsonify({"error": "JSON required"}), 400
        data = request.get_json()
        log_debug("üì• ÏõπÌõÖ Îç∞Ïù¥ÌÑ∞", json.dumps(data))
        
        # === üî• Ï§ëÎ≥µ Î∞©ÏßÄ Ï≤¥ÌÅ¨ ===
        alert_id = data.get("id", "")
        raw = data.get("symbol", "").upper().replace(".P", "")
        symbol = BINANCE_TO_GATE_SYMBOL.get(raw)
        side = data.get("side", "").lower()
        action = data.get("action", "").lower()
        reason = data.get("reason", "")
        prevent_duplicate = data.get("prevent_duplicate", False)
        copy_number = data.get("copy", 0)
        attempt_number = data.get("attempt", 1)  # üî• Ï∂îÍ∞Ä: ÏãúÎèÑ Î≤àÌò∏
        
        if not symbol or symbol not in SYMBOL_CONFIG:
            return jsonify({"error": "Invalid symbol"}), 400
        
        # Ï§ëÎ≥µ Î∞©ÏßÄÍ∞Ä ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ Ï≤¥ÌÅ¨
        if prevent_duplicate and copy_number == 0:  # ÏõêÎ≥∏ ÏïåÎ¶ºÎßå Ï≤¥ÌÅ¨ (copyÎäî Î¨¥Ïãú)
            if is_duplicate_alert(alert_id, symbol, side, action):
                return jsonify({"status": "duplicate_ignored", "message": "Ï§ëÎ≥µ ÏïåÎ¶º Î¨¥ÏãúÎê®"})
        elif copy_number > 0:
            # copy ÏïåÎ¶ºÏùÄ Î°úÍ∑∏Îßå ÎÇ®Í∏∞Í≥† Î¨¥Ïãú
            log_debug("üìã Copy ÏïåÎ¶º Î¨¥Ïãú", f"copy={copy_number}, ID={alert_id}")
            return jsonify({"status": "copy_ignored", "message": "Copy ÏïåÎ¶º Î¨¥ÏãúÎê®"})

        # üî• Ï∂îÍ∞Ä: ÏãúÎèÑ Î≤àÌò∏ Î°úÍπÖ
        if attempt_number > 1:
            log_debug("üîÑ Ïû¨ÏãúÎèÑ ÏïåÎ¶º", f"attempt={attempt_number}, {symbol} {side} {action}")

        if action == "exit":
            update_position_state(symbol, timeout=1)
            current_side = position_state.get(symbol, {}).get("side")
            if reason == "reverse_signal":
                success = close_position(symbol)
            else:
                if side == "long" and current_side == "buy":
                    success = close_position(symbol)
                elif side == "short" and current_side == "sell":
                    success = close_position(symbol)
                else:
                    log_debug(f"‚ùå Ï≤≠ÏÇ∞ Ïã§Ìå® ({symbol})", f"ÌòÑÏû¨ Ìè¨ÏßÄÏÖò: {current_side}, ÏöîÏ≤≠ side: {side}")
                    success = False
            log_debug(f"üîÅ Ï≤≠ÏÇ∞ Í≤∞Í≥º ({symbol})", f"ÏÑ±Í≥µ: {success}")
            return jsonify({"status": "success" if success else "error"})
        
        if side not in ["long", "short"] or action not in ["entry", "exit"]:
            return jsonify({"error": "Invalid side/action"}), 400
        if not update_position_state(symbol, timeout=1):
            return jsonify({"status": "error", "message": "Ìè¨ÏßÄÏÖò Ï°∞Ìöå Ïã§Ìå®"}), 500
        current_side = position_state.get(symbol, {}).get("side")
        desired_side = "buy" if side == "long" else "sell"
        
        # === üî• Ìè¨ÏßÄÏÖò ÏÉÅÌÉú Í∏∞Î∞ò Ï§ëÎ≥µ ÏßÑÏûÖ Ï≤¥ÌÅ¨ ===
        if current_side and current_side == desired_side:
            log_debug("üö´ ÎèôÏùº Î∞©Ìñ• Ìè¨ÏßÄÏÖò Ï°¥Ïû¨", f"ÌòÑÏû¨: {current_side}, ÏöîÏ≤≠: {desired_side} - ÏßÑÏûÖ Ï∑®ÏÜå (attempt: {attempt_number})")
            return jsonify({"status": "duplicate_position", "message": "ÎèôÏùº Î∞©Ìñ• Ìè¨ÏßÄÏÖòÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï®", "attempt": attempt_number})
        
        if current_side and current_side != desired_side:
            log_debug("üîÑ Ïó≠Ìè¨ÏßÄÏÖò Ï≤òÎ¶¨", f"ÌòÑÏû¨: {current_side} ‚Üí Î™©Ìëú: {desired_side}")
            if not close_position(symbol):
                log_debug("‚ùå Ïó≠Ìè¨ÏßÄÏÖò Ï≤≠ÏÇ∞ Ïã§Ìå®", "")
                return jsonify({"status": "error", "message": "Ïó≠Ìè¨ÏßÄÏÖò Ï≤≠ÏÇ∞ Ïã§Ìå®"})
            time.sleep(3)
            if not update_position_state(symbol):
                log_debug("‚ùå Ïó≠Ìè¨ÏßÄÏÖò ÌõÑ ÏÉÅÌÉú Í∞±Ïã† Ïã§Ìå®", "")
        qty = calculate_position_size(symbol)
        log_debug(f"üßÆ ÏàòÎüâ Í≥ÑÏÇ∞ ÏôÑÎ£å ({symbol})", f"{qty} Í≥ÑÏïΩ")
        if qty <= 0:
            log_debug("‚ùå ÏàòÎüâ Ïò§Î•ò", f"Í≥ÑÏÇ∞Îêú ÏàòÎüâ: {qty}")
            return jsonify({"status": "error", "message": "ÏàòÎüâ Í≥ÑÏÇ∞ Ïò§Î•ò"})
        success = place_order(symbol, desired_side, qty)
        log_debug(f"üì® ÏµúÏ¢Ö Í≤∞Í≥º ({symbol})", f"Ï£ºÎ¨∏ ÏÑ±Í≥µ: {success}, attempt: {attempt_number}")
        return jsonify({
            "status": "success" if success else "error", 
            "qty": float(qty), 
            "duplicate_prevention": prevent_duplicate,
            "attempt": attempt_number
        })
    except Exception as e:
        log_debug(f"‚ùå ÏõπÌõÖ Ï†ÑÏ≤¥ Ïã§Ìå® ({symbol or 'unknown'})", str(e))
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/status", methods=["GET"])
def status():
    """ÏÑúÎ≤Ñ ÏÉÅÌÉú Ï°∞Ìöå"""
    try:
        equity = get_total_collateral(force=True)
        positions = {}
        for sym in SYMBOL_CONFIG:
            if update_position_state(sym, timeout=1):
                pos = position_state.get(sym, {})
                if pos.get("side"):
                    positions[sym] = {k: float(v) if isinstance(v, Decimal) else v for k, v in pos.items()}
        
        # Ï§ëÎ≥µ Î∞©ÏßÄ ÏÉÅÌÉú Ï†ïÎ≥¥ Ï∂îÍ∞Ä
        with duplicate_prevention_lock:
            duplicate_stats = {
                "alert_cache_size": len(alert_cache),
                "recent_signals_size": len(recent_signals),
                "recent_signals": {k: {"side": v["side"], "action": v["action"], "age": time.time() - v["time"]} 
                                 for k, v in recent_signals.items()}
            }
        
        return jsonify({
            "status": "running",
            "timestamp": datetime.now().isoformat(),
            "margin_balance": float(equity),
            "positions": positions,
            "actual_entry_prices": {k: float(v) for k, v in actual_entry_prices.items()},
            "duplicate_prevention": duplicate_stats
        })
    except Exception as e:
        log_debug("‚ùå ÏÉÅÌÉú Ï°∞Ìöå Ïã§Ìå®", str(e))
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/debug", methods=["GET"])
def debug_account():
    """Í≥ÑÏ†ï ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥"""
    try:
        acc = api.list_futures_accounts(SETTLE)
        debug_info = {
            "raw_response": str(acc),
            "total": str(getattr(acc, 'total', 'ÏóÜÏùå')),
            "available": str(getattr(acc, 'available', 'ÏóÜÏùå')),
            "margin_balance": str(getattr(acc, 'margin_balance', 'ÏóÜÏùå')),
            "equity": str(getattr(acc, 'equity', 'ÏóÜÏùå')),
        }
        return jsonify(debug_info)
    except Exception as e:
        return jsonify({"error": str(e)})

async def send_ping(ws):
    """ÏõπÏÜåÏºì Ìïë Ï†ÑÏÜ°"""
    while True:
        try:
            await ws.ping()
        except Exception:
            break
        await asyncio.sleep(30)

async def price_listener():
    """Ïã§ÏãúÍ∞Ñ Í∞ÄÍ≤© Î™®ÎãàÌÑ∞ÎßÅ"""
    uri = "wss://fx-ws.gateio.ws/v4/ws/usdt"
    symbols = list(SYMBOL_CONFIG.keys())
    reconnect_delay = 5
    max_delay = 60
    log_debug("üì° ÏõπÏÜåÏºì ÏãúÏûë", f"URI: {uri}, Ïã¨Î≥º: {len(symbols)}Í∞ú")
    while True:
        try:
            async with websockets.connect(uri, ping_interval=30, ping_timeout=15) as ws:
                subscribe_msg = {
                    "time": int(time.time()),
                    "channel": "futures.tickers",
                    "event": "subscribe",
                    "payload": symbols
                }
                await ws.send(json.dumps(subscribe_msg))
                ping_task = asyncio.create_task(send_ping(ws))
                reconnect_delay = 5
                while True:
                    try:
                        msg = await asyncio.wait_for(ws.recv(), timeout=45)
                        try:
                            data = json.loads(msg)
                        except json.JSONDecodeError:
                            continue
                        if not isinstance(data, dict):
                            continue
                        if data.get("event") == "subscribe":
                            continue
                        result = data.get("result")
                        if not result:
                            continue
                        if isinstance(result, list):
                            for item in result:
                                if isinstance(item, dict):
                                    process_ticker_data(item)
                        elif isinstance(result, dict):
                            process_ticker_data(result)
                    except (asyncio.TimeoutError, websockets.ConnectionClosed):
                        ping_task.cancel()
                        break
                    except Exception:
                        continue
        except Exception:
            await asyncio.sleep(reconnect_delay)
            reconnect_delay = min(reconnect_delay * 2, max_delay)

def process_ticker_data(ticker):
    """Ïã§ÏãúÍ∞Ñ Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Î∞è SL/TP Ï≤¥ÌÅ¨"""
    try:
        contract = ticker.get("contract")
        last = ticker.get("last")
        if not contract or not last or contract not in SYMBOL_CONFIG:
            return
        price = Decimal(str(last).replace("E", "e")).normalize()
        acquired = position_lock.acquire(timeout=1)
        if not acquired:
            return
        try:
            if not update_position_state(contract, timeout=1):
                return
            pos = position_state.get(contract, {})
            entry = pos.get("price")
            size = pos.get("size", 0)
            side = pos.get("side")
            if not entry or size <= 0 or side not in ["buy", "sell"]:
                return
            cfg = SYMBOL_CONFIG[contract]
            if side == "buy":
                sl = entry * (1 - cfg["sl_pct"])
                tp = entry * (1 + cfg["tp_pct"])
                if price <= sl:
                    log_debug(f"üõë SL Ìä∏Î¶¨Í±∞ ({contract})", f"ÌòÑÏû¨Í∞Ä:{price} <= SL:{sl} (ÏßÑÏûÖÍ∞Ä:{entry})")
                    close_position(contract)
                elif price >= tp:
                    log_debug(f"üéØ TP Ìä∏Î¶¨Í±∞ ({contract})", f"ÌòÑÏû¨Í∞Ä:{price} >= TP:{tp} (ÏßÑÏûÖÍ∞Ä:{entry})")
                    close_position(contract)
            else:
                sl = entry * (1 + cfg["sl_pct"])
                tp = entry * (1 - cfg["tp_pct"])
                if price >= sl:
                    log_debug(f"üõë SL Ìä∏Î¶¨Í±∞ ({contract})", f"ÌòÑÏû¨Í∞Ä:{price} >= SL:{sl} (ÏßÑÏûÖÍ∞Ä:{entry})")
                    close_position(contract)
                elif price <= tp:
                    log_debug(f"üéØ TP Ìä∏Î¶¨Í±∞ ({contract})", f"ÌòÑÏû¨Í∞Ä:{price} <= TP:{tp} (ÏßÑÏûÖÍ∞Ä:{entry})")
                    close_position(contract)
        finally:
            position_lock.release()
    except Exception:
        pass

def backup_position_loop():
    """Î∞±ÏóÖ Ìè¨ÏßÄÏÖò ÏÉÅÌÉú Í∞±Ïã†"""
    while True:
        try:
            for sym in SYMBOL_CONFIG:
                update_position_state(sym, timeout=1)
            time.sleep(300)
        except Exception:
            time.sleep(300)

if __name__ == "__main__":
    log_initial_status()
    threading.Thread(target=lambda: asyncio.run(price_listener()), daemon=True).start()
    threading.Thread(target=backup_position_loop, daemon=True).start()
    port = int(os.environ.get("PORT", 8080))
    log_debug("üöÄ ÏÑúÎ≤Ñ ÏãúÏûë", f"Ìè¨Ìä∏ {port}ÏóêÏÑú Ïã§Ìñâ (Ï§ëÎ≥µ ÏßÑÏûÖ Î∞©ÏßÄ ÌôúÏÑ±Ìôî)")
    app.run(host="0.0.0.0", port=port, debug=False)
