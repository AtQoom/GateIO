import os
import time
import requests
from flask import Flask, request, jsonify

from config import BASE_URL, SYMBOL, TAKE_PROFIT_PERCENT, STOP_LOSS_PERCENT
from utils import get_open_position, place_order, close_position, get_current_price

app = Flask(__name__)


@app.route("/", methods=["POST"])
def webhook():
    data = request.json

    if not data or "signal" not in data or "position" not in data:
        return jsonify({"error": "Invalid signal format"}), 400

    position = data["position"].lower()
    if position not in ["long", "short"]:
        return jsonify({"error": "Invalid position"}), 400

    print(f"\nüì• Signal received: {position.upper()}")

    # ÏßÑÏûÖ
    side = "buy" if position == "long" else "sell"
    place_order(side)

    # ÌèâÎã®Í∞Ä ÌôïÏù∏ (ÏïΩÍ∞Ñ ÎåÄÍ∏∞)
    time.sleep(1.5)
    entry_price = get_open_position()

    if not entry_price:
        print("‚ùå Ìè¨ÏßÄÏÖò ÏßÑÏûÖ Ïã§Ìå® ÎòêÎäî ÌèâÎã®Í∞Ä ÌôïÏù∏ Î∂àÍ∞Ä")
        return jsonify({"error": "no open position"}), 500

    print(f"‚úÖ ÏßÑÏûÖ ÏôÑÎ£å | ÏßÑÏûÖÍ∞Ä: {entry_price:.4f}")

    # TP / SL ÏÑ§Ï†ï
    tp_price = entry_price * (1 + TAKE_PROFIT_PERCENT) if position == "long" else entry_price * (1 - TAKE_PROFIT_PERCENT)
    sl_price = entry_price * (1 - STOP_LOSS_PERCENT) if position == "long" else entry_price * (1 + STOP_LOSS_PERCENT)

    print(f"üéØ TP Î™©ÌëúÍ∞Ä: {tp_price:.4f}, SL ÏÜêÏ†àÍ∞Ä: {sl_price:.4f}")

    # Î™®ÎãàÌÑ∞ÎßÅ Î£®ÌîÑ
    while True:
        try:
            price = get_current_price()
            print(f"üìä ÌòÑÏû¨Í∞Ä: {price:.4f}")

            if position == "long":
                if price >= tp_price:
                    print(f"‚úÖ TP ÎèÑÎã¨! {price:.4f}")
                    close_position("sell")
                    break
                elif price <= sl_price:
                    print(f"‚ùå SL ÎèÑÎã¨! {price:.4f}")
                    close_position("sell")
                    break
            else:  # short
                if price <= tp_price:
                    print(f"‚úÖ TP ÎèÑÎã¨! {price:.4f}")
                    close_position("buy")
                    break
                elif price >= sl_price:
                    print(f"‚ùå SL ÎèÑÎã¨! {price:.4f}")
                    close_position("buy")
                    break

            time.sleep(5)

        except Exception as e:
            print(f"‚ö†Ô∏è Ïò§Î•ò Î∞úÏÉù: {e}")
            time.sleep(5)

    return jsonify({"status": "closed"}), 200


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    app.run(host="0.0.0.0", port=port)
